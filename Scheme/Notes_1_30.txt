Chez Scheme operations:
    > (display 2/3)
    2/3

    > (sqrt -1)
    0+1i

Binding Values
- (let ((var expr) ...) body1 body2 ...), this binds an expression to a name - maintains refferential transparency
- variables are bound to the values by the 'let' operations
- refer to variables by by 'let' as 'let-bound' variables 

Let X = X
- beacause expressions in the first position of a procedure application are evaluated no differently from other expressions, a let-bound variable may be used there as well
- variables bound by let are only visible by let bodies

Let
- possible to nest let expressions 

Let vs lambda
- a let expression is nothing more than the direct application of a lambda expression to a set of argument expressions 
    (let ([x 'a]) (cons x x))
    and
    ((lambda (x) (cons x x)) 'a)
    are the same
    ex:
        > (let ([x 'a]) (cons x x))
        (a . a)

    Note:
    - (a . a) is a pair, (a a) is a list 

Parameters
- formal parameter specification can be in any of the following 3 forms
    - proper list of variables: (var1 ... varn)
        exactly n parameters must be supplied 
    - single variable: varr
        any number of variables is valid
    - improper list of variables: (var1 ... varn . varr)
        at least n parameters must be supplied 
        remaining parameters are wrapped into a list 
        
Return a Lambda

    > (define double-any 
        (lambda (f x)
            (f x x)))
    
    > (double-any + 2)      // + is placed in the f, 2 is placed in the x.
    4                       // The function changes from (f x x) to (+ 2 2)

    > (double-any cons 'a)
    (a . a)

Abbreviation

    (define var0
        (lambda varr
            e1 e2 ...))

    //can be shortened to:
    
    (define (var0 . varr)
        e1 e2 ...)

    -----------------------

    (define var0
        (lambda (var1 ... varn . varr)
            e1 e2 ...))
    
    //can be shortened to:
    
    (define (var0 var1 ... varn . varr)
        e1 e2 ...)

Procedures
- a procedure is treated as an object just like a number, string, etc
- top-level definitions are visible in every expression, except where shadowed by another binding 
- the most common operation to perform on a procedure is to apply it to one or more values 

Lambda 
    
    > ((lambda (x) (+ x x)) (* 3 4))    // here, parameters are evaluated before the procedure is called (evalued inbound)
    24                                  // scheme tends to evaluate the inner most argument first, then left to right
    

    > (define doubler                   //nested lambda example
        (lambda (f)
            (lambda (x) (f x x))))
    
    > ((doubler +) 4)
    8

    > ((doubler *) 0+1i)
    -1

Binding
- values do not have to be bound before being referenced (foreward refferencing)
- they do have to be bound before being called, however
- this is a form of lazy evaluation -

Procedure Binding

    > (define proc1
        (lambda (x y)
            (proc2 y x)))
    
    > (proc1 'a 'b)         // since proc2 has not been defined yet, we get an error
    Exception: variable proc2 is not bound
    
    > (define proc2 cons)
    > (proc1 'a 'b)         // now that proc2 is defined, proc1 can call it and run
    (b . a)

Cond
- (if test consequent alternative)
- Have =, >=, not, or, etc.
- syntactic form, not a procedure due to need to not evaluate all arguments 

    > (define abs
        (lambda (n)
            (if (< n 0)
                (- 0 n)
                n)))
    
    > (abs 42)
    42

    > (abs -42)
    42

--------------------------------------------

    (define single
        (lambda (n)
            (cond 
            [(<n 0) -1]
            [(> n 0) +1]
            [else 0]))

--------------------------------------------

    > (or)
    #f 

    > (or #t (/ 1 0))       // this is true because of left to right evaluation 
    #t 

    > (or (/ 1 0) #t)
    Exception in /: undefined for 0


    // most things evaluate to true. EX:

    > (and)
    #t

    > (if '() 'true 'false)
    true

    > (if 0 'true 'false)
    true

    > (if #f 'true 'false)
    false

    > (or #f 'a #f)
    a 

Short Circuit

    > (define reciprocal
        (lambda (n)
            (and (not (= n 0))      // check to not divide by 0
            (/ 1 n))))

Predicates
- the procedures =, <, >, <=, etc 

    > (null? '())
    #t                  // thus, null is an empty list

    > (null? 'abc)
    #f

Lisp CDR

    > (cdr '())
    Exception in cdr: () is not a pair      // so you can not use cdr on empty list
                                            // you can define a function that will apply to an empty list though (similar to lisp-CDR)

Equivalence
 
    > (eqv? 'a 'a)
    #t                                      // checks for equivalence

    > (eqv? (cons 'a 'b) (cons 'a 'b))
    #f                                      // this is false due to them being 2 different lists
                                            // though they are identical, they are not the same 


