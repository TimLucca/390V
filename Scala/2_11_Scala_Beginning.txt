Overview
- runs on JVM
    - thus, has access to java libraries
- Scala.js is a Scala compiler that can compile to JavaScript
    - so, can run on front end
    - can also write backend using node.js 
- LLVM compiler can compile scala to object code for platforms AKA ".exe"

- No primitives - all types are objects, including functions
- Type inference, you don't need to specify a type
    - ex: val a = 3 
        doesn't need to specify that a is an int
- Traits and mix-ins
- Closures (a function in its referencing enviornment)
    - gives ability to do encapsulation and hide variable
    - also allows multiple lambdas which can allow multiple states
- Concurrency support inspired by Erlang
- Currying
    - named after Haskell Curry
    - takes multiparameter functions and turns it to multiple single parameter functions
- Immutability
    - can't always be immutable, I/O itself is mutable so it can't always be avoided
        - queues in Scala are also mutable by definition, however they are thread safe
    - mostly uses 'node splitting' 
        - ex in a list where the 3rd value is changed:
            - the old list will still exist
            - the new list will still start at the head of the old list 
                - the new list gets a pointer to a new 3rd value that then diverts from the original list 
- Lazy evaluation
- Pattern matching
- algebraic data types
- covariance and contravariance
- anonymous types 
- operator overloading
- optional parameters
- named parameters
- raw strings
- class names are TitleCased 
- methods are camelCased
- files are ObjectName.scala
- object have "def main(args: Array[String])"
- semicolons at end of line are optional
- lines are automatically joined if they are unfinished
    - ex: end with unclosed parenthesis
- arithmetic operators are treated like other methods (like + and <<)
- any method can be used as an infix operator
    > "%d apples".format(num)
    > "%d apples" format(num) 
    both work the same
    ex:

    > 1 + 1
    res: Int = 2
    > 1.+(1)
    res: Int = 2

    > 1F.+(1)
    res: Float = 2.0
    > 1F + 1
    res: Float = 2.0


    > 1.<TAB> 
    shows all commands you can call on object '1'

    > 1.toBinaryString
    res0: String = 1


- function names are allowed to consist of sequences of arbitrary symbols

----------------------------------------------------------------------------
Apply and Update
----------------------------------------------------------------------------
- foo() is short for foo.apply()
- foo() = 42 is short for foo.update(42)
- foo(42) is short for foo.apply(42)
- foo(4) = 2 is short for foo.update(4, 2)


- the use of curly braces instead of parentheses is allowed in method calls
- allows pure library implementations of new control structures
    - a = foo(4)
    - a = foo{4} 

    > 1.+{2}
    res: Int = 8


Imports
- import scala.xml._
    - imports all things from scala.xml
- import scala.collection.immutable.{treemap, something else}
    - only imports specified things

Interesting Objects
- unit -> kind of like void
    - like an empty return
- null
- nothing -> a subclass of all other classes
    - below all types
- all types inherit from a top-level class 'Any'
    - above all types
    - childeren are AnyVal and AnyRef
- this almost looks identical to Haskell's type system

- unlike C or Java, but similar to Lisp or Scheme, Scala makes no distinction between statements and expressions
- all statements are in fact expressions that evaluate to some value
    ex:
    > val hexDigit = if (x >= 10) x + 'A' - 10 else x + '0'

