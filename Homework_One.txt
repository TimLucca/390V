(define vecadd
    (lambda (l1 l2)
        (if (null? l1)
            '()
            (cons (+ (car l1) (car l2)) 
                (if (list? (cdr l1))
                    (vecadd (cdr l1) (cdr l2))
                    (if(pair? (cdr l1))
                        (vecadd (list (cdr l1)) (list (cdr l2)))
                        (+ (cdr l1) (cdr l2))))))))

(define fn
    (lambda (f l1 l2)
        (if (null? l1)
            '()
            (cons (f (car l1) (car l2)) 
                (if (list? (cdr l1))
                    (vecfn f (cdr l1) (cdr l2))
                    (if(pair? (cdr l1))
                        (vecfn f (list (cdr l1)) (list (cdr l2)))
                        (f (cdr l1) (cdr l2))))))))