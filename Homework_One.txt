======================================================================================
ANSWER - vecadd
======================================================================================

(define vecadd
    (lambda (l1 l2)
      (cond
        [(and (null? l1) (null? l2)) '()]
        [(and (pair? l1) (pair? l2)) (cons (+ (car l1) (car l2)) (vecfn (cdr l1) (cdr l2)))]
        [else (+ l1 l2)])))

======================================================================================
ANSWER - vecfn 
======================================================================================

(define vecfn
    (lambda (f l1 l2)
      (cond
        [(and (null? l1) (null? l2)) '()]
        [(and (pair? l1) (pair? l2)) (cons (f (car l1) (car l2)) (vecfn f (cdr l1) (cdr l2)))]
        [else (f l1 l2)])))

======================================================================================
ANSWER - vecfun - relies on vecfn
======================================================================================

(define-syntax vecfun
    ((_ f x y)
        (vecfn f x y)))

