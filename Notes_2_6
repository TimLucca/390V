For homework:
    "extra credit" for figuring out what to do with different sized lists; ex: (1 1) + (1) = ?
                                                                                (1 1) + (1 [base]) = (1 1) + (1 0)


Continuations
- during the evaluation of a scheme expression, implementation must be keep track of:
    1) what to evaluate
    2) what to do with the value (this is called the CONTINUATION OF A COMPUTATION)
- at any point during the evaluation of any expression, there is a continuation ready to complete the computation 

> (if (null? x) (quote ()) (cdr x))

- values to be computed:
    1) value of (if (null? x) (quote ()) (cdr x))
    2) value of (null? x)
    3) value of null?
    4) value of x
    5) value of cdr 
    6) value of x

- currying: decomposing a function into multiple single parameters

call-with-current-continuation
- call/cc must be passed a procedure p of one argument
- call/cc constructs a concrete representation of the current contiuation and passes it to p 
- the continuation itself is represented by a procedure k 

> (call/cc
    (lambda (k)
        (* 5 4)))
20

- continuation is capture and bound to k, but k is never used, so the value returned is just 5*4

> (call/cc
    (lambda (k)
        (* 5 (k 4))))
4

- continuation is invoked before the multiplication, so the value is the value passed to the continuation, 4

> (+ 2
    (call/cc
        (lambda (k)
            (* 5 (k 4)))))
6


> (define product
    (lambda (ls)
        (call/cc
            (lambda (break)
                (let f ([ls ls])
                    (cond
                        [(null? ls) 1]
                        [(= (car ls) 0) (break 0)]
                        [else (* (car ls) (f (cdr ls)))]))))))

> (product '(1 2 3 4 5))
120
> (product '(7 3 8 0 1 9 5)) // once 0 is reached, the entire calculation ends and 0 is returned
0

> (define (*& x y k) (k (* x y)))     // cps version = (*& x y k); call/cc version = (k (* x y))
> (define (+& x y k) (k (+ x y)))
> (define (sqrt& x k) (k (sqrt x)))

> (define (pyth& x y k)
    (*& x x (lambda (x2)
        (*& y y (lambda (y2)
            (+& x2 y2 (lambda (x2py2)
                (sqrt& x2py2 k))))))))
> (pyth& 3 4 display)
> (newline)


- this function takes functions and returns their cps-primative function 
> (define (cps-prim f)
    (lambda args
        (let ((r (reverse args)))
            ((car r) (apply f
                (reverse (cdr r)))))))
> (define *& (cps-prim *))
> (define +& (cps-prim +))
> (define sqrt& (cps-prim sqrt))


Ways to test for equivalence
- '=' for numbers
- 'eq?' tests to see if the object is in the same place in memory
> (define x '(2 3))
> (define y '(2 3))
> (eq? x y)
#f
> (define y x)
> (eq? x y)
#t 

> (eq? 2 2)         // integral numbers, taken as symbols 
#t
> (eq? 2.5 2.5)     // created as objects independantly (called constructors)
#f

// scheme only makes 1 empty list, so both x and y are bound to the same empty list (similarly to '2')
> (define x '())
> (define y '())
> (eq? x y)
#t 

> (define x '(2 3))
> (define y '(2 3))
> (equal? x y)
#t 

- use = when testing numbers
- use eqv? for 2 non-numeric values 
- use equal? for testing lists, vectors, etc
- dont use eq? unless testing for using the same memory location


memq, memv, member
- if an object equivalent to obj is found, the tail of the list whose first element of that object is returned
- memq uses eq?, memv uses eqv?, member uses equal?
> (memq 'a '(b c a d e))
(a d e)

- memp is the first tail of list for whose car procedure returns true, otherwise returns #f
> (memp even? '(1 2 3 4))
(2 3 4)
> (mem odd? '(2 4 5 6 8))
#f


> (filter odd? '(1 2 3 4))
(1 3)
> (partition odd? '(1 2 3 4))
(1 3)
(2 4)

> (find odd? '(1 2 3 4))
1
> (find even? '(1 2 3 4))
2
> (find odd? '(2 4 6 8))
#f

Associative Lists
- key-value pairs (like dictionary)
- the car is the key, cdr is the value 
- it is essentially a list of pairs

- assq uses eq?, assv uses eqv?, assoc uses equal?, assp uses your own procedure 
> (assq 'b '((a . 1) (b . 2)))

Vectors
- constant-time addressing (instead of linear time like lists)
> (vector 'a 'b 'c)
#(a b c)
> (vector-length '#(a b c))
3
> (vector-ref '#(a b c) 1)
b 


> (vector->list '#(a b c))
(a b c)

> (list->vector '(a b c))
#(a b c)




