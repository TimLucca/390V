Lambdas

args -> function using args 
- (n -> System.out.println(n))
- (n -> {if (n%2 == 0) System.out.println(n);})

Method References
    ex:

    class ComparisonProvider {
        public int compareByName(Person a, Person b) {
            return a.getName().compareTo(b.getName());
        }
        public int compareByAge(Person a, Person b) {
            return a.getBirthday().compareTo(b.getBirthday());
        }
    }

    ComparisonProvider myComparisonProvider = new ComparisonProvider();
    Arrays.sort(rosterAsArray, myComparisonProvider::compareByName);



    String[] stringArray = { "Barbra", "Java", "Mary", "John"}
    Arrays.sort(stringArray, String::compareToIgnoreCase);


    // could call a constructor by method references also
    Classname::new 



Streams are lazily evaluated
general outline:

Generator -> Intermediator -> Terminal
typically one generator, multiple intermediates, one terminal 

if there is no terminal at the end, due to the nature of the lazy evaluation, no operations will happen


Predicates
- a predicate is a statement that may be true or false depending on the values of its variables 
- it can be thought of as a function that returns either true or false 
- predicates have a .text() function where the parameter is tested to be true or false in the function 
    ex:
    Predicate<String> isALongWord = t -> t.length() > 10;
    System.out.println(isALongWord.test("successfully"));


Consumer - terminal operation 
- functional interface represents an operation that accepts a single input argument and returns no result 
- the real outcome is the side-effects it produces (ex System.out::println())
- since its a functional interface, you can pass a lambda expression wherever a Consumer is expected 


Function - intermediate operation 
- functional interface represents a function that accepts one argument and produces a result (ex map)
- since its a functional interface, you can pass lambda expressions 


Supplier - generator operation 
- functional interface does the oposite of the Consumer, it takes no argumetns but it returns some value (ex get)
- can pass lambdas 



examples:

    Supplier:

    IntStream.range(0, 10).forEach(System.out::println);
    /*
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    */


    Parallel:

    IntStream.range(0, 10).parallel().forEach(System.out::println);
    /*
    1
    2
    0
    4
    3
    8
    9
    7
    6
    5
    */


No Boxing
- Predicate<Integer> p = i -> i > 10;
- IntPredicate p = i -> i > 10;
- the second example is faster because it is using the primitave type


Functional Interfaces
- java.util.function 
- many built in datatypes have streams built in already 
    - ex: lists.stream


BiConsumer Interface 
- represents an operation that accepts two input arguments and returns no result 
- this is the two-arity specialization of Consumer
-  unlike most other functinoal interfaces, BiCOnsumer is expected to operate via side-effects


BiFunction Interface
- two-arity specialization of Function 
- represensts a function that accepts two arguments and produces a result 


BiPredicate Interface 
- two-arity specialization of Predicate 


BinaryOperator Interface 
- represents an operation upon two operands of the same type, producing a result of the same type as the operands 
- this is a specialization of BiFUnction for the case where the operands and the result are all of the same type 


BooleanSupplier Interface 
- represents a supplier of boolean-valued results
- boolean-producing primitive specialization of Supplier 


Function Interface 
- <V> Function<T,V> andTHen(Function<? super R,? extends V> after)
    - returns a composed function that first applies this function to its input, and then applies the after function to the result 
- apply(T t)
    - applies this function to the given argument 
- <V> Function<V,R> compose(Function<? superV, ? extends T> before)
    - returns a composed function that first applies the before function to its input, and then applies this function to the result 
- <T> Function<T,T>identity()
    - returns a function that always returns its input argument 

Predicate Interface
- boolean test(T t)
    - evaluates this predicate on the given argument
- Predicate<T> and(Predicate<? super T> other) 
    - returns a composed predicate that represents a short-circuiting logical AND of this predicate and another 
- <T> Predicate<T> isEqual(Object Ref)


Supplier Interface 
- represents a supplier of results 
- only has "get()"
- there is no requirement that a new or distinct result be returned each time the supplier is called 



Streams
- a stream is not a data structure
    - instead it takes input from Collections, Arrays, or I/O channels
- streams dont change the original data structure, they only provide the result as per the pipelined methods 
- each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined 
- terminal operations mark the end of the sream and return the result 


Stages 
- Creation 
    - Stream.of, .stream(), ...
- Intermediate 
    - map, filter, peek, sorted, ...
- Terminal 
    - collect, forEach, reduce, ...


examples of multiple functions:

Stream.of("one", "two", "three", "four")
    .filter(e -> e.length() > 3)
    .peek(e -> System.out.println("Filtered value: " + e))
    .map(String::toUpperCase)
    .peek(e -> System.out.println("Mapped value: " + e))
    .collect(Collectors.toList());
/*
Filtered value: three 
Mapped value: THREE 
Filtered value: four 
Mapped value: FOUR 
*/


IntStream.of(1, 2, 3).forEach(System.out::println);
/*
1
2
3
*/


IntStream.iterate(0, i -> i + 2)
    .limit(3)
    .foreach(System.out::println);
/*
0
2
4
*/


IntStream.generate(() -> ThreadLocalRandom.current()
    .nextInt(10))
    .limit(3)
    .forEach(system.out::println);
/*
1
2
9*/


