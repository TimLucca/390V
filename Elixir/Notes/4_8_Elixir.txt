Elixir
- &1 is the first parameter parameter to a function 
- default parameters use \\ nottation 
- iex or iex.bat for REPL

- package manager is mix
    - ebin - contains the compiled bytecode
    - lib - contains the elixer code (usually .ex files)
    - test - contains tests (usually .exs files)

Defining Functions
- def/2 for public functions 
- defp/2 for private functions 

    defmodule Math do 
        def zero?(0), do: true
        def zero?(_), do: false
    end 

    fun = &Math.zero?/1         // this is capturing the function, where 'fun' becomes a pointer to the Math.zero function 


    iex> fun = &(&1 + 1)        // so this function increments the first parameter by 1
    iex> fun.(41)
    42
    iex> fun = fn x -> x + 1 end // this is the same as the function above, but in a mannar similar to what we are use to 
    iex> fun.(41)
    42

    defmodule Concat do 
        def join(a, b, sep \\ " ") do
            a <> sep <> b 
        end 
    end 

                                // the double backslash in the def join is the default parameter that can be changed 

    ies> Concat.join("hello", "world") 
    "hello world"

    ies> Concat.join("hello", "world", "_")
    "hello_world"


    defmodule Recursion do 
        def print_multiple_times(msg, n) when n <= 1 do     // this is a guard to chose which function to use since they are both same name and parameters 
            IO.puts msg                                     // allows us to not have to rely on conditionals (like if/else). this is also tail recursive 
        end 

        def print_multiple_times(msg, n) do
            IO.puts msg 
            print_multiple_times(msg, n-1)
        end 
    end 


    defmodule Math do 
        def sum_list([head | tail], accumulator) do 
            sum_list(tail, head + accumulator)
        end 

        def sum_list([], accumulator) do 
            accumulator
        end 
    end 


    // Map and Reduce 
    // both forms of reduce and map do the same 

    Enum.reduce([1, 2, 3], 0, fn(x, acc) -> x + acc end)
    Enum.map([1, 2, 3], fn(x) -> x * 2 end)

    Enum.reduce([1, 2, 3], 0, &+/2) 
    Enum.map([1, 2, 3], &(&1 * 2)) 


    // Pipe Operator, allows chaining of operations 
    iex> odd? = &(rem(&1, 2) != 0)
    iex> total_sum = 1..100_000 |> Enum.map(&(&1 * 3)) |> Enum.filter(odd?) |> Enum.sum     //this is from 1 to 100,000 (the _ == ,) 
    // so this function multiplies every number from 1 to 100,000
    // then, it filters all the numbers and keeps odds, drops evens 
    // the it adds everything left over 

    //Streams 
    iex> 1..100_000 |> Enum.map(&(&1 * 3))      // eager evaluation 
    iex> 1..100_000 |> Stream.map(&(&1 * 3))    // lazy evaluation 


Concurrent Programming in Elixer 
- Elixer calls it processes, not the same as an OS's process 
- Processes in Elixer are extremely lightweight in terms of memory and CPU 
    - even more lightweight than threads 
- not uncommon to have tens or hundreds of thousands of processes running simultaneously 

    Send and Recieve 

    iex> send self(), {:hello, "world"}
    {:hello, "world"}

    iex> recieve do 
    iex> {:hello, msg} -> msg 
    iex> {:world, _msg} -> "won't match"
    iex> end 
    "world"

    iex> recieve do 
    iex> {:hello, msg} -> msg 
    iex> after 
    iex> 1_000 -> "nothing after 1s"
    iex> end 
    "nothing after 1s"

    // Getting Process IDs
    iex> parent = self()
    #PID<0.104.0>

    iex> spawn fn -> send(parent, {:hello, self()}) end     // spawn is to create new Process IDs 
    #PID<0.119.0>                                           // if child dies though, it ends up killing the parent too 

    iex> recieve do 
    iex> {:hello, pid} -> "Got hello from #{inspect pid}"
    iex> end 
    "Got hello from #PID<0.119.0>"

    // sooooo
    iex> spawn_link fn -> raise "oops" end 
    //raises an exception in the child process, which ends up killing the parent process as well 

- Elixer processes are isolated and don't share states 
    - a failure in a process will never crash or corrupt the state of another process
- Links allow process to establish a relationship in case of failure 
- link process to supervisors so we can send reports 

    State 

    defmodule KV do                 //KV as 'key value'
        def start_link do 
            Task.start_link(fn -> loop(%{}) end) 
        end 

        defp loop(map) do 
            recieve do 
                {:get, key, caller} -> 
                    send caller, Map.get(map, key) 
                    loop(map)
                {:put, key, value} -> 
                    loop(Map.put(map, key, value))
            end 
        end 
    end 


    iex> {:ok, pid} = KV.start_link         // creates a new KV process 
    {:ok, #PID<0.109.0>}                    // so the address of KV.start_link is bound in a tuple with an atom that contains the item to match, ':ok'
    
    iex> send pid, {:get, :hello, self()}   //so key is :hello to :get and self() is the PID of this process 
    {:get, :hello, #PID<0.107.0>}           
    
    iex> flush 
    nil
    :ok 

    iex> send pid, {:put, :hello, :world}
    {:put, :hello, :world}

    iex> send pid, {:get, :hello, self()}
    {:get, :hello, #PID<0.107.0>}

    iex> flush 
    :world 
    :ok 

    iex> Process.register(pid, :kv)
    true 

    // Agents (used to maintain state)
    iex> {:ok, pid} = Agent.start_link(fn -> %{} end)
    {:ok, #PID<0.117.0>}

    iex> Agent.update(pid, fn map -> Map.put(map, :hello, :world) end) 
    :ok

    iex> Agent.get(pid, fn map -> Map.get(map, :hello) end)
    :world 



    defmodule EchoServer do 
        require Logger 

        def accept(port) do 
            {:ok, socket} = :gen_tcp.listen(port, 
                [:binary, packet: :line, active: :false, reuseaddr: :true])
            Logger.info "Accepting connections on port #{port}"
            loop_acceptor(socket)
        end 

        defp loop_acceptor(socket) do 
            {:ok, client} = :gen_tcp.accept(socket)
            Task.start_link(fn -> serve(client) end) 
            loop_acceptor(socket) 
        end 

        defp serve(socket) do 
            socket |> read_line() |> write_line(socket) 
            :ok = :gen_tcp.close(socket) 
        end 

        defp read_line(socket) do 
            {:ok, data} = :gen_tcp.recv(socket...)
            write_line(line, socket)
        end 

        defp write_line(line, socket) do 
            :gen_tcp.send(socket, line)  
        end 

        def main(args \\ []) do 
            accept(9999) 
        end 
    end 